{"ast":null,"code":"import axios from 'axios';\nimport { getAuthToken } from './authService';\nconst API_URL = 'http://localhost:8000/api';\n\n// Add this interceptor to automatically add the token to all requests\naxios.interceptors.request.use(config => {\n  const token = getAuthToken();\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\napi.interceptors.response.use(response => response, async error => {\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('auth_token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const fetchConversations = () => api.get('conversations/');\nexport const fetchFolders = () => api.get('folders/');\nexport const fetchGroups = () => api.get('groups/');\nexport const fetchGroup = id => api.get(`groups/${id}/`);\nexport const searchConversations = query => api.get('conversations/search/', {\n  params: {\n    q: query\n  }\n});\n\n// Update group by ID\nexport const updateGroup = async (id, data) => {\n  console.log('Updating group with token:', localStorage.getItem('auth_token'));\n  try {\n    const response = await axios.put(`${API_URL}/groups/${id}/`, data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error updating group:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\n\n// Update conversation by ID\nexport const updateConversation = (id, data) => api.put(`conversations/${id}/`, data);\n\n// Update folder by ID\nexport const updateFolder = (id, data) => api.put(`folders/${id}/`, data);\nexport default api;","map":{"version":3,"names":["axios","getAuthToken","API_URL","interceptors","request","use","config","token","headers","error","Promise","reject","api","create","baseURL","withCredentials","localStorage","getItem","response","status","removeItem","window","location","href","fetchConversations","get","fetchFolders","fetchGroups","fetchGroup","id","searchConversations","query","params","q","updateGroup","data","console","log","put","_error$response","message","updateConversation","updateFolder"],"sources":["C:/Users/AVIV/Desktop/small projects/this is the one/whatsorganizer/whatsorganizer-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getAuthToken } from './authService';\r\n\r\nconst API_URL = 'http://localhost:8000/api';\r\n\r\n// Add this interceptor to automatically add the token to all requests\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = getAuthToken();\r\n        if (token) {\r\n            config.headers['Authorization'] = `Token ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  withCredentials: true,\r\n});\r\n\r\napi.interceptors.request.use(\r\n  config => {\r\n    const token = localStorage.getItem('auth_token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => Promise.reject(error)\r\n);\r\n\r\napi.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    if (error.response && error.response.status === 401) {\r\n      localStorage.removeItem('auth_token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const fetchConversations = () => api.get('conversations/');\r\nexport const fetchFolders = () => api.get('folders/');\r\nexport const fetchGroups = () => api.get('groups/');\r\nexport const fetchGroup = (id) => api.get(`groups/${id}/`);\r\nexport const searchConversations = (query) => api.get('conversations/search/', { params: { q: query } });\r\n\r\n\r\n\r\n// Update group by ID\r\nexport const updateGroup = async (id, data) => {\r\n    console.log('Updating group with token:', localStorage.getItem('auth_token'));\r\n    try {\r\n        const response = await axios.put(`${API_URL}/groups/${id}/`, data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error updating group:', error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Update conversation by ID\r\nexport const updateConversation = (id, data) => api.put(`conversations/${id}/`, data);\r\n\r\n// Update folder by ID\r\nexport const updateFolder = (id, data) => api.put(`folders/${id}/`, data);\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}