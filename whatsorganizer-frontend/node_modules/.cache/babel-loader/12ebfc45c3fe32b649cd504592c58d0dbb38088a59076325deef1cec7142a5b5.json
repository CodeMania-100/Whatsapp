{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000/api/';\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\napi.interceptors.response.use(response => response, async error => {\n  if (error.response && error.response.status === 401) {\n    // Token has expired, try to refresh it\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      const response = await axios.post(`${API_URL}token/refresh/`, {\n        refresh: refreshToken\n      });\n      localStorage.setItem('auth_token', response.data.access);\n      error.config.headers['Authorization'] = `Token ${response.data.access}`;\n      return axios(error.config);\n    } catch (refreshError) {\n      // Refresh failed, redirect to login\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('refresh_token');\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport const fetchConversations = (page = 1, folder = null) => {\n  let url = `conversations/?page=${page}`;\n  if (folder) {\n    url += `&folder=${folder}`;\n  }\n  return api.get(url);\n};\nexport const fetchFolders = () => api.get('folders/');\nexport const searchConversations = query => api.get('conversations/search/', {\n  params: {\n    q: query\n  }\n});\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","status","refreshToken","post","refresh","setItem","data","access","refreshError","removeItem","window","location","href","fetchConversations","page","folder","url","get","fetchFolders","searchConversations","query","params","q"],"sources":["C:/Users/AVIV/Desktop/small projects/this is the one/whatsorganizer/whatsorganizer-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8000/api/';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  withCredentials: true,\r\n});\r\n\r\napi.interceptors.request.use(\r\n  config => {\r\n    const token = localStorage.getItem('auth_token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => Promise.reject(error)\r\n);\r\n\r\napi.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    if (error.response && error.response.status === 401) {\r\n      // Token has expired, try to refresh it\r\n      try {\r\n        const refreshToken = localStorage.getItem('refresh_token');\r\n        const response = await axios.post(`${API_URL}token/refresh/`, { refresh: refreshToken });\r\n        localStorage.setItem('auth_token', response.data.access);\r\n        error.config.headers['Authorization'] = `Token ${response.data.access}`;\r\n        return axios(error.config);\r\n      } catch (refreshError) {\r\n        // Refresh failed, redirect to login\r\n        localStorage.removeItem('auth_token');\r\n        localStorage.removeItem('refresh_token');\r\n        window.location.href = '/login';\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const fetchConversations = (page = 1, folder = null) => {\r\n    let url = `conversations/?page=${page}`;\r\n    if (folder) {\r\n      url += `&folder=${folder}`;\r\n    }\r\n    return api.get(url);\r\n  };\r\nexport const fetchFolders = () => api.get('folders/');\r\nexport const searchConversations = (query) => api.get('conversations/search/', { params: { q: query } });\r\n\r\nexport default api;\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,4BAA4B;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,eAAe,EAAE;AACnB,CAAC,CAAC;AAEFH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAASH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CAC/B,CAAC;AAEDZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC3BS,QAAQ,IAAIA,QAAQ,EACpB,MAAMH,KAAK,IAAI;EACb,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACA,IAAI;MACF,MAAMC,YAAY,GAAGR,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MAC1D,MAAMK,QAAQ,GAAG,MAAMjB,KAAK,CAACoB,IAAI,CAAC,GAAGnB,OAAO,gBAAgB,EAAE;QAAEoB,OAAO,EAAEF;MAAa,CAAC,CAAC;MACxFR,YAAY,CAACW,OAAO,CAAC,YAAY,EAAEL,QAAQ,CAACM,IAAI,CAACC,MAAM,CAAC;MACxDV,KAAK,CAACL,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAASI,QAAQ,CAACM,IAAI,CAACC,MAAM,EAAE;MACvE,OAAOxB,KAAK,CAACc,KAAK,CAACL,MAAM,CAAC;IAC5B,CAAC,CAAC,OAAOgB,YAAY,EAAE;MACrB;MACAd,YAAY,CAACe,UAAU,CAAC,YAAY,CAAC;MACrCf,YAAY,CAACe,UAAU,CAAC,eAAe,CAAC;MACxCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOd,OAAO,CAACC,MAAM,CAACS,YAAY,CAAC;IACrC;EACF;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMgB,kBAAkB,GAAGA,CAACC,IAAI,GAAG,CAAC,EAAEC,MAAM,GAAG,IAAI,KAAK;EAC3D,IAAIC,GAAG,GAAG,uBAAuBF,IAAI,EAAE;EACvC,IAAIC,MAAM,EAAE;IACVC,GAAG,IAAI,WAAWD,MAAM,EAAE;EAC5B;EACA,OAAO9B,GAAG,CAACgC,GAAG,CAACD,GAAG,CAAC;AACrB,CAAC;AACH,OAAO,MAAME,YAAY,GAAGA,CAAA,KAAMjC,GAAG,CAACgC,GAAG,CAAC,UAAU,CAAC;AACrD,OAAO,MAAME,mBAAmB,GAAIC,KAAK,IAAKnC,GAAG,CAACgC,GAAG,CAAC,uBAAuB,EAAE;EAAEI,MAAM,EAAE;IAAEC,CAAC,EAAEF;EAAM;AAAE,CAAC,CAAC;AAExG,eAAenC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}