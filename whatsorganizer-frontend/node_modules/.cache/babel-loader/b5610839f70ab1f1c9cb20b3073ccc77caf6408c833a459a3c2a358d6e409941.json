{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000/api'; // adjust if your API URL is different\n\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true // This is important for sending cookies (if using session auth)\n});\n\n// Add this function to get the CSRF token from cookies\nfunction getCsrfToken() {\n  var _document$cookie$spli;\n  return (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith('csrftoken='))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n}\n\n// Modify your updateGroup function\nexport const updateGroup = async (id, data) => {\n  const csrfToken = getCsrfToken();\n  const token = localStorage.getItem('auth_token'); // assuming you store the token in localStorage\n\n  try {\n    const response = await api.put(`/groups/${id}/`, data, {\n      headers: {\n        'X-CSRFToken': csrfToken,\n        'Authorization': `Token ${token}` // Include this if using token auth\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error updating group:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","withCredentials","getCsrfToken","_document$cookie$spli","document","cookie","split","find","row","startsWith","updateGroup","id","data","csrfToken","token","localStorage","getItem","response","put","headers","error","_error$response","console","message"],"sources":["C:/Users/AVIV/Desktop/small projects/this is the one/whatsorganizer/whatsorganizer-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8000/api';  // adjust if your API URL is different\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  withCredentials: true,  // This is important for sending cookies (if using session auth)\r\n});\r\n\r\n// Add this function to get the CSRF token from cookies\r\nfunction getCsrfToken() {\r\n  return document.cookie.split('; ')\r\n    .find(row => row.startsWith('csrftoken='))\r\n    ?.split('=')[1];\r\n}\r\n\r\n// Modify your updateGroup function\r\nexport const updateGroup = async (id, data) => {\r\n  const csrfToken = getCsrfToken();\r\n  const token = localStorage.getItem('auth_token');  // assuming you store the token in localStorage\r\n\r\n  try {\r\n    const response = await api.put(`/groups/${id}/`, data, {\r\n      headers: {\r\n        'X-CSRFToken': csrfToken,\r\n        'Authorization': `Token ${token}`,  // Include this if using token auth\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating group:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAE;;AAE9C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,eAAe,EAAE,IAAI,CAAG;AAC1B,CAAC,CAAC;;AAEF;AACA,SAASC,YAAYA,CAAA,EAAG;EAAA,IAAAC,qBAAA;EACtB,QAAAA,qBAAA,GAAOC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CAC/BC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,YAAY,CAAC,CAAC,cAAAN,qBAAA,uBADrCA,qBAAA,CAEHG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA;AACA,OAAO,MAAMI,WAAW,GAAG,MAAAA,CAAOC,EAAE,EAAEC,IAAI,KAAK;EAC7C,MAAMC,SAAS,GAAGX,YAAY,CAAC,CAAC;EAChC,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAE;;EAEnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMnB,GAAG,CAACoB,GAAG,CAAC,WAAWP,EAAE,GAAG,EAAEC,IAAI,EAAE;MACrDO,OAAO,EAAE;QACP,aAAa,EAAEN,SAAS;QACxB,eAAe,EAAE,SAASC,KAAK,EAAE,CAAG;MACtC;IACF,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACL,IAAI;EACtB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IAAA,IAAAC,eAAA;IACdC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBT,IAAI,KAAIQ,KAAK,CAACG,OAAO,CAAC;IAC7E,MAAMH,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}