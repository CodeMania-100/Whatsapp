{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AVIV\\\\Desktop\\\\small projects\\\\this is the one\\\\whatsorganizer\\\\whatsorganizer-frontend\\\\src\\\\services\\\\FolderList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchFolders } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FolderList = () => {\n  _s();\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchFolders().then(response => {\n      console.log(\"Folders:\", response.data);\n      setFolders(response.data.results); // Assuming 'results' contains folders\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching folders:\", error);\n      setError('Failed to load folders.');\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading folders...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Folders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), folders.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No folders found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: folders.map(folder => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: folder.name\n      }, folder.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(FolderList, \"aQenjvS7Yx7VbFcYZP2EqPbYyEA=\");\n_c = FolderList;\nexport default FolderList;\nvar _c;\n$RefreshReg$(_c, \"FolderList\");","map":{"version":3,"names":["React","useState","useEffect","fetchFolders","jsxDEV","_jsxDEV","FolderList","_s","folders","setFolders","loading","setLoading","error","setError","then","response","console","log","data","results","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","folder","name","id","_c","$RefreshReg$"],"sources":["C:/Users/AVIV/Desktop/small projects/this is the one/whatsorganizer/whatsorganizer-frontend/src/services/FolderList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchFolders } from '../services/api';\r\n\r\nconst FolderList = () => {\r\n    const [folders, setFolders] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchFolders()\r\n            .then(response => {\r\n                console.log(\"Folders:\", response.data);\r\n                setFolders(response.data.results); // Assuming 'results' contains folders\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching folders:\", error);\r\n                setError('Failed to load folders.');\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    if (loading) return <div>Loading folders...</div>;\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>Folders</h2>\r\n            {folders.length === 0 ? (\r\n                <p>No folders found.</p>\r\n            ) : (\r\n                <ul>\r\n                    {folders.map(folder => (\r\n                        <li key={folder.id}>{folder.name}</li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FolderList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZC,YAAY,CAAC,CAAC,CACTW,IAAI,CAACC,QAAQ,IAAI;MACdC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,QAAQ,CAACG,IAAI,CAAC;MACtCT,UAAU,CAACM,QAAQ,CAACG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;MACnCR,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDS,KAAK,CAACR,KAAK,IAAI;MACZI,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CC,QAAQ,CAAC,yBAAyB,CAAC;MACnCF,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,OAAO,EAAE,oBAAOL,OAAA;IAAAgB,QAAA,EAAK;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACjD,IAAIb,KAAK,EAAE,oBAAOP,OAAA;IAAAgB,QAAA,EAAMT;EAAK;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAEpC,oBACIpB,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAAgB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACfjB,OAAO,CAACkB,MAAM,KAAK,CAAC,gBACjBrB,OAAA;MAAAgB,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAExBpB,OAAA;MAAAgB,QAAA,EACKb,OAAO,CAACmB,GAAG,CAACC,MAAM,iBACfvB,OAAA;QAAAgB,QAAA,EAAqBO,MAAM,CAACC;MAAI,GAAvBD,MAAM,CAACE,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CACxC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACP;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAClB,EAAA,CApCID,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AAsChB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}